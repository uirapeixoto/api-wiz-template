# ASP.NET Core
# Build a Web project that uses ASP.NET Core.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
# YAML reference:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema

trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - README.md

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  BuildConfiguration: 'Release'
  RestoreBuildProjects: '**/*.csproj'
  RestoreBuildProjectsTest: '**/*[Tt]ests/*.csproj'
  # Necess치rio caso h치 Wiz.Common (Nuget)
  #wizCrossFeed: '09b2821a-2950-4eff-a722-dbc8adf4da55'

resources:
- repo: self

steps:
- task: DotNetCoreCLI@2
  displayName: '.NET Core SDK'
  inputs:
    packageType: sdk
    version: 3.x
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(RestoreBuildProjects)'
    # Necess치rio caso h치 Wiz.Common (Nuget)
    #feedRestore: '$(wizCrossFeed)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude=[xunit*]*'
    projects: '$(RestoreBuildProjects)'

- script: |
    dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
    ./reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:HtmlInline_AzurePipelines;HtmlInline_AzurePipelines_Dark;Cobertura"
  displayName: Create Code coverage report

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/*.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    projects: '$(RestoreBuildProjects)'
    publishWebProjects: false
    modifyOutputPath: true
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
